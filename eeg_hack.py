# -*- coding: utf-8 -*-
"""EEG_Hack.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bpla_fFChuqnf11pPtqJCyUYFhNZKJT-

Instalación de librería
"""

#pip install scipy

import pandas as pd
import numpy as np
import scipy
from scipy.fft import fft
import matplotlib.pyplot as plt
from scipy import signal

"""Cargar los datos de EEG"""

#eeg=open('/content/eeg.csv')
eeg = pd.read_csv('/content/eeg.csv')
eeg=np.transpose(eeg)

eeg = eeg.to_numpy()

"""Definir variables"""

fs=250
nyq=fs/2
n_canal=20
canal_filt=[]

"""Creación del filtro y filtrado de la señal"""

#Definir los límites del filtro pasa bandas en Delta
lowpass_delta=0.2/nyq
highpass_delta=4/nyq

#Definir los límites del filtro pasa bandas en Theta
lowpass_theta=4/nyq
highpass_theta=8/nyq

#Definir los límites del filtro pasa bandas en Alpha
lowpass_alpha=8/nyq
highpass_alpha=12/nyq

#Definir los límites del filtro pasa bandas en Beta
lowpass_beta=12/nyq
highpass_beta=30/nyq

#Definir los límites del filtro pasa bandas en Gamma
lowpass_gamma=30/nyq
highpass_gamma=90/nyq

#Creación del filtro sos de Delta de décimo orden
sos_delta=scipy.signal.butter(4, [lowpass_delta, highpass_delta], btype='bandpass', output='sos')

#Creación del filtro sos de Theta de décimo orden
sos_theta=scipy.signal.butter(4, [lowpass_theta, highpass_theta], btype='bandpass', output='sos')

#Creación del filtro sos de Alpha de décimo orden
sos_alpha=scipy.signal.butter(4, [lowpass_alpha, highpass_alpha], btype='bandpass', output='sos')

#Creación del filtro sos de Beta de décimo orden
sos_beta=scipy.signal.butter(4, [lowpass_beta, highpass_beta], btype='bandpass', output='sos')

#Creación del filtro sos de Gamma de décimo orden
sos_gamma=scipy.signal.butter(4, [lowpass_gamma, highpass_gamma], btype='bandpass', output='sos')

#Poder de banda por canales
matrizfiltro=[]
matrizpoder=[]
matriz_final=[]

sos=[sos_delta, sos_theta, sos_alpha, sos_beta, sos_gamma]

for banda in sos:
  prom_can = []
  for i in range(0,(n_canal)):
    #Filtrado de los datos en alpha
    filtered=scipy.signal.sosfilt(banda, eeg[:, i])
    matrizfiltro.append(filtered)
    #Espectro de poder
    poder=scipy.signal.periodogram(filtered, fs=250, window='boxcar', nfft=None, detrend='constant', return_onesided=True, scaling='density', axis=-1)
    #print(pd.DataFrame(poder))
    poder=np.transpose(poder)
    poder_prom=sum(poder[:,1])/len(poder[:,1])
    #print(pd.DataFrame(poder),"------", poder_prom)
    prom_can.append(poder_prom)

  matriz_final.append(np.transpose(prom_can))

print(pd.DataFrame(matriz_final))
matriz_final=pd.DataFrame(matriz_final)

matriz_final[1][2] #fila, columna

#Positive & negative trait
if (matriz_final[1][2]> matriz_final[3][2]):
  trait = "positivo"
else:
  trait = "negativo"

#Arousal (quizá movemos el umbral)
if abs((matriz_final[5][3])/(matriz_final[7][3]))<0.5:
  arousal="fuerte"
else:
  arousal = "debil"

#Attention
prom_theta=(matriz_final[0][1]+matriz_final[3][1])/2
if matriz_final[0][1] >= prom_theta:
  atencion="concentrado"
else:
  atencion="desconcentrado"

#Cuadrante
if trait == "positivo" and arousal == "fuerte":
  emocion = "alegria"
elif trait == "positivo" and arousal == "debil":
  emocion = "tranquilo"
elif trait == "negativo" and arousal == "fuerte":
  emocion = "enojo"
else:
  emocion = "triste"

print(emocion)
print(atencion)

